Q-1)

#include <iostream>
using namespace std;

// Node structure
struct Node {
    int data;
    Node* next;
};

// Head pointer (initially NULL)
Node* head = NULL;

// Function to insert at beginning
void insertAtBeginning(int value) {
    Node* newNode = new Node();
    newNode->data = value;
    newNode->next = head;
    head = newNode;
    cout << "Inserted " << value << " at the beginning.\n";
}

// Function to insert at end
void insertAtEnd(int value) {
    Node* newNode = new Node();
    newNode->data = value;
    newNode->next = NULL;

    if (head == NULL) {
        head = newNode;
    } else {
        Node* temp = head;
        while (temp->next != NULL)
            temp = temp->next;
        temp->next = newNode;
    }
    cout << "Inserted " << value << " at the end.\n";
}

// Function to insert before or after a specific value
void insertBeforeAfter(int value, int target, bool before) {
    Node* newNode = new Node();
    newNode->data = value;

    if (head == NULL) {
        cout << "List is empty.\n";
        delete newNode;
        return;
    }

    // If target is at head and inserting before
    if (before && head->data == target) {
        newNode->next = head;
        head = newNode;
        cout << "Inserted " << value << " before " << target << ".\n";
        return;
    }

    Node* temp = head;
    while (temp != NULL) {
        if (!before && temp->data == target) {
            newNode->next = temp->next;
            temp->next = newNode;
            cout << "Inserted " << value << " after " << target << ".\n";
            return;
        } else if (before && temp->next != NULL && temp->next->data == target) {
            newNode->next = temp->next;
            temp->next = newNode;
            cout << "Inserted " << value << " before " << target << ".\n";
            return;
        }
        temp = temp->next;
    }

    cout << "Target value " << target << " not found.\n";
    delete newNode;
}

// Function to delete from beginning
void deleteFromBeginning() {
    if (head == NULL) {
        cout << "List is empty.\n";
        return;
    }
    Node* temp = head;
    head = head->next;
    cout << "Deleted node " << temp->data << " from beginning.\n";
    delete temp;
}

// Function to delete from end
void deleteFromEnd() {
    if (head == NULL) {
        cout << "List is empty.\n";
        return;
    }
    if (head->next == NULL) {
        cout << "Deleted node " << head->data << " from end.\n";
        delete head;
        head = NULL;
        return;
    }
    Node* temp = head;
    while (temp->next->next != NULL)
        temp = temp->next;
    cout << "Deleted node " << temp->next->data << " from end.\n";
    delete temp->next;
    temp->next = NULL;
}

// Function to delete a specific node
void deleteSpecific(int value) {
    if (head == NULL) {
        cout << "List is empty.\n";
        return;
    }
    if (head->data == value) {
        Node* temp = head;
        head = head->next;
        cout << "Deleted node " << value << ".\n";
        delete temp;
        return;
    }

    Node* temp = head;
    while (temp->next != NULL && temp->next->data != value)
        temp = temp->next;

    if (temp->next == NULL) {
        cout << "Node " << value << " not found.\n";
        return;
    }

    Node* delNode = temp->next;
    temp->next = delNode->next;
    cout << "Deleted node " << value << ".\n";
    delete delNode;
}

// Function to search for a node
void searchNode(int value) {
    Node* temp = head;
    int pos = 1;
    while (temp != NULL) {
        if (temp->data == value) {
            cout << "Node " << value << " found at position " << pos << ".\n";
            return;
        }
        temp = temp->next;
        pos++;
    }
    cout << "Node " << value << " not found.\n";
}

// Function to display all nodes
void displayList() {
    if (head == NULL) {
        cout << "List is empty.\n";
        return;
    }
    Node* temp = head;
    cout << "Linked List: ";
    while (temp != NULL) {
        cout << temp->data << " -> ";
        temp = temp->next;
    }
    cout << "NULL\n";
}

// Main function with menu
int main() {
    int choice, value, target;
    bool before;

    while (true) {
        cout << "\n=== Singly Linked List Menu ===\n";
        cout << "1. Insert at Beginning\n";
        cout << "2. Insert at End\n";
        cout << "3. Insert Before/After a Node\n";
        cout << "4. Delete from Beginning\n";
        cout << "5. Delete from End\n";
        cout << "6. Delete a Specific Node\n";
        cout << "7. Search for a Node\n";
        cout << "8. Display List\n";
        cout << "9. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
            case 1:
                cout << "Enter value: ";
                cin >> value;
                insertAtBeginning(value);
                break;
            case 2:
                cout << "Enter value: ";
                cin >> value;
                insertAtEnd(value);
                break;
            case 3:
                cout << "Enter new value: ";
                cin >> value;
                cout << "Enter target value: ";
                cin >> target;
                cout << "Insert before(1) or after(0)? ";
                cin >> before;
                insertBeforeAfter(value, target, before);
                break;
            case 4:
                deleteFromBeginning();
                break;
            case 5:
                deleteFromEnd();
                break;
            case 6:
                cout << "Enter value to delete: ";
                cin >> value;
                deleteSpecific(value);
                break;
            case 7:
                cout << "Enter value to search: ";
                cin >> value;
                searchNode(value);
                break;
            case 8:
                displayList();
                break;
            case 9:
                cout << "Exiting program.\n";
                return 0;
            default:
                cout << "Invalid choice. Try again.\n";
        }
    }
}


Q-2)

#include <iostream>
using namespace std;

// Node structure
struct Node {
    int data;
    Node* next;
};

// Function to insert a node at the end
void insertAtEnd(Node*& head, int value) {
    Node* newNode = new Node();
    newNode->data = value;
    newNode->next = NULL;

    if (head == NULL) {
        head = newNode;
        return;
    }

    Node* temp = head;
    while (temp->next != NULL)
        temp = temp->next;

    temp->next = newNode;
}

// Function to display the linked list
void displayList(Node* head) {
    if (head == NULL) {
        cout << "List is empty.";
        return;
    }
    Node* temp = head;
    while (temp != NULL) {
        cout << temp->data;
        if (temp->next != NULL)
            cout << " -> ";
        temp = temp->next;
    }
    cout << endl;
}

// Function to count and delete all occurrences of a given key
int countAndDelete(Node*& head, int key) {
    int count = 0;

    // Delete from the beginning while head matches key
    while (head != NULL && head->data == key) {
        Node* temp = head;
        head = head->next;
        delete temp;
        count++;
    }

    // Delete from the rest of the list
    Node* current = head;
    while (current != NULL && current->next != NULL) {
        if (current->next->data == key) {
            Node* temp = current->next;
            current->next = temp->next;
            delete temp;
            count++;
        } else {
            current = current->next;
        }
    }

    return count;
}

// Main function
int main() {
    Node* head = NULL;
    int key;

    // Creating the linked list: 1 -> 2 -> 1 -> 2 -> 1 -> 3 -> 1
    int values[] = {1, 2, 1, 2, 1, 3, 1};
    for (int i = 0; i < 7; i++)
        insertAtEnd(head, values[i]);

    cout << "Original Linked List: ";
    displayList(head);

    cout << "Enter key to delete: ";
    cin >> key;

    int count = countAndDelete(head, key);

    cout << "\nCount of " << key << ": " << count << endl;
    cout << "Updated Linked List: ";
    displayList(head);

    return 0;
}


Q-3)

#include <iostream>
using namespace std;

// Node structure
struct Node {
    int data;
    Node* next;
};

// Function to insert a node at the end
void insertAtEnd(Node*& head, int value) {
    Node* newNode = new Node();
    newNode->data = value;
    newNode->next = NULL;

    if (head == NULL) {
        head = newNode;
        return;
    }

    Node* temp = head;
    while (temp->next != NULL)
        temp = temp->next;

    temp->next = newNode;
}

// Function to display the linked list
void displayList(Node* head) {
    Node* temp = head;
    while (temp != NULL) {
        cout << temp->data;
        if (temp->next != NULL)
            cout << " -> ";
        temp = temp->next;
    }
    cout << endl;
}

// Function to find the middle element
void findMiddle(Node* head) {
    if (head == NULL) {
        cout << "The list is empty.\n";
        return;
    }

    Node* slow = head; // moves one step
    Node* fast = head; // moves two steps

    // Move fast pointer twice as fast as slow
    while (fast != NULL && fast->next != NULL) {
        slow = slow->next;
        fast = fast->next->next;
    }

    cout << "The middle element is: " << slow->data << endl;
}

// Main function
int main() {
    Node* head = NULL;
    int n, value;

    cout << "Enter number of nodes: ";
    cin >> n;

    cout << "Enter " << n << " values:\n";
    for (int i = 0; i < n; i++) {
        cin >> value;
        insertAtEnd(head, value);
    }

    cout << "\nLinked List: ";
    displayList(head);

    findMiddle(head);

    return 0;
}

Q-4)

#include <iostream>
using namespace std;

// Node structure
struct Node {
    int data;
    Node* next;
};

// Function to insert a node at the end
void insertAtEnd(Node*& head, int value) {
    Node* newNode = new Node();
    newNode->data = value;
    newNode->next = NULL;

    if (head == NULL) {
        head = newNode;



